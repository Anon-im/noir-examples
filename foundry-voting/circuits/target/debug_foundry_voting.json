{"debug_symbols":[{"locations":{"0":[{"span":{"start":199,"end":233},"file":0},{"span":{"start":755,"end":793},"file":23}],"1":[{"span":{"start":255,"end":307},"file":0},{"span":{"start":755,"end":793},"file":23}],"2":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":529,"end":555},"file":25},{"span":{"start":122,"end":149},"file":15}],"3":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":529,"end":555},"file":25},{"span":{"start":122,"end":149},"file":15}],"4":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":529,"end":555},"file":25},{"span":{"start":122,"end":149},"file":15}],"5":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":529,"end":555},"file":25},{"span":{"start":122,"end":149},"file":15}],"6":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":716,"end":728},"file":25}],"7":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"8":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"9":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"10":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"11":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"12":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"13":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"14":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":716,"end":728},"file":25}],"15":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"16":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"17":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"18":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"19":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"20":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"21":[{"span":{"start":331,"end":398},"file":0},{"span":{"start":821,"end":872},"file":25},{"span":{"start":755,"end":793},"file":23}],"22":[{"span":{"start":411,"end":429},"file":0}]}}],"file_map":{"0":{"source":"use dep::std;\n\nfn main(\n    root: pub Field,\n    index: Field,\n    hash_path: [Field; 2],\n    secret: Field,\n    proposalId: pub Field,\n    vote: pub Field\n) -> pub Field {\n    let note_commitment = std::hash::pedersen_hash([secret]);\n    let nullifier = std::hash::pedersen_hash([root, secret, proposalId]);\n\n    let check_root = std::merkle::compute_merkle_root(note_commitment, index, hash_path);\n    assert(root == check_root);\n\n    // Originally contrained the vote to avoid front-running,\n    // but including the vote as a public input is sufficient\n\n    // assert(vote <= 1);\n\n    nullifier\n}\n\n#[test]\nfn test_valid_build_merkle_tree() {\n    let commitment_0 = std::hash::pedersen_hash([1]);\n    let commitment_1 = std::hash::pedersen_hash([2]);\n    let commitment_2 = std::hash::pedersen_hash([3]);\n    let commitment_3 = std::hash::pedersen_hash([4]);\n\n    let left_branch = std::hash::pedersen_hash([commitment_0, commitment_1]);\n    let right_branch = std::hash::pedersen_hash([commitment_2, commitment_3]);\n\n    let root = std::hash::pedersen_hash([left_branch, right_branch]);\n\n    let proposalId = 0;\n    let vote = 1;\n\n    let nullifier = main(root, 0, [commitment_1, right_branch], 1, proposalId, vote);\n\n    let expected_nullifier = std::hash::pedersen_hash([root, 1, proposalId]);\n\n    std::println(\"Merkle Tree:\");\n    std::println([root]);\n    std::println([left_branch, right_branch]);\n    std::println([commitment_0, commitment_1, commitment_2, commitment_3]);\n\n    assert(nullifier == expected_nullifier);\n}\n\n// fn main(root : pub Field, index : Field, hash_path : [Field; 2], secret: Field, priv_key: Field, proposalId: pub Field, vote: pub u8) -> pub Field {\n//     let note_commitment = std::hash::pedersen([priv_key, secret]);\n//     let nullifier = std::hash::pedersen([root, priv_key, proposalId]);\n\n//     let check_root = std::merkle::compute_merkle_root(note_commitment[0], index, hash_path);\n//     assert(root == check_root);\n\n//     // Originally contrained the vote to avoid front-running,\n//     // but including the vote as a public input is sufficient\n\n//     assert(vote <= 1);\n\n//     nullifier[0]\n// }\n\n// Helpers for getting note_commitments to build the merkle tree.\n// To view: nargo test --show-output\n\n#[test]\nfn test_build_merkle_tree() {\n    let secret = 9;\n    let commitment_0 = std::hash::pedersen_hash([0, secret]);\n    let commitment_1 = std::hash::pedersen_hash([1, secret]);\n    let commitment_2 = std::hash::pedersen_hash([2, secret]);\n    let commitment_3 = std::hash::pedersen_hash([3, secret]);\n\n    let left_branch = std::hash::pedersen_hash([commitment_0, commitment_1]);\n    let right_branch = std::hash::pedersen_hash([commitment_2, commitment_3]);\n\n    let root = std::hash::pedersen_hash([left_branch, right_branch]);\n\n    std::println(\"Merkle Tree:\");\n    std::println([root]);\n    std::println([left_branch, right_branch]);\n    std::println([commitment_0, commitment_1, commitment_2, commitment_3]);\n}\n","path":"/home/josh/Documents/Github/noir-examples/foundry-voting/circuits/src/main.nr"},"15":{"source":"impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x âˆˆ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n","path":"std/field.nr"},"23":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"25":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"}},"warnings":[]}